#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

. "$DOTFILES_ROOT/script/output.sh"

set -e

echo ''

configure () {
  for config in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name 'config.sh' -not -path "$DOTFILES_ROOT/.*")
  do
    local topic action
    topic=$(basename "$(dirname "$config")")

    user "Configure $topic?\\n\
    [y]es, [n]o?"
    read -r 1 action
    case "$action" in
      y|Y )
        info "configuring $topic"
        bash -c "$config"
        success "configured $topic"
        ;;
      * )
        ;;
    esac
  done
}

link_file () {
  local src=$1 dst=$2

  local overwrite backup skip action

  if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]
  then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then
      local currentSrc="$(readlink "$dst")"

      if [ "$currentSrc" == "$src" ]
      then
        skip=true;
      else
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\\n\
    [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action
        echo $action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    mkdir -p "$(dirname "$dst")"
    ln -s "$src" "$dst"
    success "linked $src to $dst"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  # install simple symlinks
  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path "$DOTFILES_ROOT/.*")
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  # install files of the form ~/.topic/config
  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name 'config' -not -path "$DOTFILES_ROOT/.*")
  do
    dst="$HOME/.$(basename "$(dirname "$src")")/$(basename "$src")"
    link_file "$src" "$dst"
  done
}

install_appsupport () {
  if [ "$(uname -s)" == "Darwin" ]
  then
    info 'installing Application Support files'

    # install files that go in macos's app support
    # note: -u 3 opens a new file descriptor to read from so we don't clobber stdin
    while read -u 3 -r line
    do
      if [ -z "$line" ] || [ "${line:0:1}" == "#" ]
      then
        continue
      fi
      src="$DOTFILES_ROOT/$(echo "$line" | cut -d: -f1)"
      dst="$HOME/Library/Application Support/$(echo "$line" | cut -d: -f2)"
      link_file "$src" "$dst"
    done 3< "$DOTFILES_ROOT/appsupport"
  fi
}

install () {
  local overwrite_all=${DOTFILES_OVERWRITE:-false} backup_all=false skip_all=false

  if [ -t 0 ]
  then
    configure
  fi
  echo
  install_dotfiles
  echo
  install_appsupport
}

install

echo ''
echo '  All installed!'
