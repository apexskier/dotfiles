#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! command -v git >/dev/null 2>&1 || [ "$DOTFILES_SKIP_GIT" == true ]; then
    info 'skipping git'
    return 0
  fi

  info 'setup local gitconfig'

  gitconfig_local_file="$HOME/.gitconfig.local"

  touch "$gitconfig_local_file"

  git_credential='cache'
  if [ "$(uname -s)" == "Darwin" ]
  then
    git_credential='osxkeychain'
  fi
  git config --file "$gitconfig_local_file" credential.helper "$git_credential"

  if [ -z "$(git config user.name)" ]
  then
    user ' - What is your github author name?'
    read -e git_authorname
    git config --file "$gitconfig_local_file" user.name "$git_authorname"
  fi

  if [ -z "$(git config user.email)" ]
  then
    user ' - What is your github author email?'
    read -e git_authoremail
    git config --file "$gitconfig_local_file" user.email "$git_authoremail"
  fi

  success 'local gitconfig'
}

setup_ssh () {
  info 'setup ssh'
  curl --silent --output "$HOME/.ssh/authorized_keys" https://github.com/apexskier.keys
  success 'ssh'
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip= action=

  if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]
  then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then
      local currentSrc="$(readlink "$dst")"

      if [ "$currentSrc" == "$src" ]
      then
        skip=true;
      else
        user "File already exists: $dst ($(basename "$src")), what do you want to do?\\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    mkdir -p $(dirname "$dst")
    ln -s "$src" "$dst"
    success "linked $src to $dst"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  # install simple symlinks
  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path "$DOTFILES_ROOT/.*")
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done

  # install files of the form ~/.topic/config
  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name 'config' -not -path "$DOTFILES_ROOT/.*")
  do
    dst="$HOME/.$(basename $(dirname "$src"))/$(basename "$src")"
    link_file "$src" "$dst"
  done

  # install files in the .config directory
  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.config' -not -path "$DOTFILES_ROOT/.*")
  do
    # works for now
    str=${src#$DOTFILES_ROOT/}
    dst="$HOME/.config/${str%.*}"
    link_file "$src" "$dst"
  done
}

install_appsupport () {
  if [ "$(uname -s)" == "Darwin" ]
  then
    info 'installing Application Support files'

    # install files that go in macos's app support
    # note: -u 3 opens a new file descriptor to read from so we don't clobber stdin
    while read -u 3 -r line
    do
      if [ -z "$line" ] || [ "${line:0:1}" == "#" ]
      then
        continue
      fi
      src="$DOTFILES_ROOT/$(echo "$line" | cut -d: -f1)"
      dst="$HOME/Library/Application Support/$(echo "$line" | cut -d: -f2)"
      link_file "$src" "$dst"
    done 3< "$DOTFILES_ROOT/appsupport"
  fi
}

install () {
  local overwrite_all=${DOTFILES_OVERWRITE:-false} backup_all=false skip_all=false

  setup_gitconfig
  echo
  setup_ssh
  echo
  install_dotfiles
  echo
  install_appsupport
}

install

echo ''
echo '  All installed!'
