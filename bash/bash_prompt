#!/bin/bash
# vim: ft=sh

#set -x

unset color_prompt force_color_prompt

    nocol="\[\033[m\]"
    black="\[\033[0;30m\]"
     blue="\[\033[0;34m\]"
    green="\[\033[0;32m\]"
     cyan="\[\033[0;36m\]"
      red="\[\033[0;31m\]"
   purple="\[\033[0;35m\]"
    brown="\[\033[0;33m\]"
  lt_grey="\[\033[0;37m\]"
  dk_gray="\[\033[1;30m\]"
  lt_blue="\[\033[1;34m\]"
 lt_green="\[\033[1;32m\]"
  lt_cyan="\[\033[1;36m\]"
   lt_red="\[\033[1;31m\]"
lt_purple="\[\033[1;35m\]"
   yellow="\[\033[1;33m\]"
    white="\[\033[1;37m\]"
     fade="\033[2m\]"


_USER=""
# Yellow for root, bold if the user is not the login one, else no color.
if [[ "$EUID" -ne "0" ]] ; then  # if user is not root
    # if user is not login user
    if [[ $USER != "$(logname 2>/dev/null || echo $LOGNAME)" ]]; then
        _USER="$lt_grey"
    else
        _USER="$cyan"
    fi
else # root!
    _USER="$lt_cyan"
fi
_USER+="\u$nocol"

get_connection_type() {
    if [[ -n "$SSH_CLIENT$SSH2_CLIENT$SSH_TTY" ]] ; then
        echo ssh
    else
        # TODO check on *BSD
        local sess_src
        sess_src="$(who am i | sed -n 's/.*(\(.*\))/\1/p')"
        local sess_parent
        sess_parent="$(ps -o comm= -p $PPID 2> /dev/null)"
        if [[ -z "$sess_src" || "$sess_src" = ":"* ]] ; then
            echo lcl # Local
        elif [[ "$sess_parent" = "su" || "$sess_parent" = "sudo" ]] ; then
            echo su  # Remote su/sudo
        else
            echo tel # Telnet
        fi
    fi
}
CONNECTION_TYPE=$(get_connection_type)
case "$CONNECTION_TYPE" in
ssh)
    connectionmark="⇝"
    ;;
tel)
    connectionmark="⇢"
    ;;
esac

mark="@"
# If we are connected with X11 support (remote windowing on linux)
if [[ -n "$DISPLAY" ]] ; then
    mark="$white$mark$nocol"
else
    mark="$lt_grey$mark$nocol"
fi

# make this a little less prominant and different from normal text
# I don't use $ because it means something in bash
PS2="${lt_grey}❯ ${nocol}"

function gitinfo() {
    local gitbranch
    gitbranch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    if [[ -n "$gitbranch" ]]; then
        printf " (±%s)" "$gitbranch"
    fi
}

function file_in_tree() {
    local dir="$PWD"
    while [ "$dir" != "/" ]; do
        if [ -f "$dir/$1" ]; then
            echo "$dir/$1"
            return 0
        fi
        dir=$(dirname "$dir")
    done
    return 1
}

function nodeinfo() {
    if command -v node >/dev/null 2>&1; then
        if ! file_in_tree package.json > /dev/null; then
            return
        fi

        # too slow :(
        # if command -v npm >/dev/null 2>&1; then
        #     local npm_prefix=$(npm prefix)
        #     if [[ -f "$npm_prefix/package.json" ]] ; then
        #         if ! npx -q check-node-version --node "$(node -e "process.stdout.write((require('$npm_prefix/package.json').engines || {}).node || '')")" > /dev/null 2>&1 ; then
        #             printf "$red"
        #         fi
        #     fi
        # fi

        local node_version
        node_version="$(node --version)"
        # alt ⬡
        printf " (⬢%s %s)" "$nocol" "$node_version"
    fi
}

function goinfo() {
    if command -v go >/dev/null 2>&1; then
        local gomodfile
        if ! gomodfile=$(file_in_tree go.mod); then
            return
        fi

        local goversion
        goversion=$(cat "$GOROOT/VERSION")
        local goversion_major_minor
        goversion_major_minor=$(echo "${goversion:2}" | cut -d'.' -f1-2)

        local gomodversion_major_minor
        gomodversion_major_minor=$(grep '^go ' "$gomodfile")
        gomodversion_major_minor=${gomodversion_major_minor:3}

        local gocolor
        if [ "$gomodversion_major_minor" != "$goversion_major_minor" ]; then
            gocolor="$red"
        fi

        printf " (%s%s%s)" "$gocolor" "$goversion" "$nocol"
    fi
}

function k8sinfo() {
    if command -v kubectl >/dev/null 2>&1; then
        local context
        context=$(kubectl config view --minify --output=go-template --template='{{ index . "current-context" }}' 2> /dev/null)
        if [[ -n "$context" ]] ; then
            printf " (⎈%s)" "$context"
        fi
    fi
}

function exit_conventional() {
    case "$1" in
    # common conventions
    1) echo "ERROR";;
    2) echo "USAGE";;
    126) echo "NOPERM";;
    127) echo "NOTFOUND";;
    *) return 1
    esac
}

function exit_signal() {
    case "$1" in
    # signals
    129) echo "HUP";;
    130) echo "INT";;
    131) echo "QUIT";;
    132) echo "ILL";;
    133) echo "TRAP";;
    134) echo "IOT";;
    135) echo "BUS";;
    136) echo "FPE";;
    137) echo "KILL";;
    138) echo "USR1";;
    139) echo "SEGV";;
    140) echo "USR2";;
    141) echo "PIPE";;
    142) echo "ALRM";;
    143) echo "TERM";;
    144) echo "STKFLT";;
    145) echo "CHLD";;
    146) echo "CONT";;
    147) echo "STOP";;
    148) echo "TSTP";;
    149) echo "TTIN";;
    150) echo "TTOU";;
    *) return 1
    esac
}

function exitinfo() {
    local desc
    if desc=$(exit_signal "$1"); then
        printf "%s☇ %s%s" "$red" "$desc" "$nocol"
    elif desc=$(exit_conventional "$1"); then
        printf "%s↩ %s%s %s(%s)%s" "$red" "$1" "$nocol" "$fade" "$desc" "$nocol"
    else
        printf "%s↩ %s%s" "$red" "$1" "$nocol"
    fi
}

__dotfiles_prompt_gitinfo_file=$(mktemp)
__dotfiles_prompt_nodeinfo_file=$(mktemp)
__dotfiles_prompt_goinfo_file=$(mktemp)
__dotfiles_prompt_k8sinfo_file=$(mktemp)

function set_prompt() {
    # get return code of last cmd
    local -i last_err=$?
    local cmd_info=""
    if (( last_err != 0 )); then
        cmd_info="$(exitinfo $last_err)\n"
    fi

    history -a

    local ret

    local write=":"
    if [[ -w "$PWD" ]] ; then
        write="$green$write$nocol"
    else
        write="$red$write$nocol"
    fi

    local venv
    if [[ -n "$VIRTUAL_ENV" ]] ; then
        venv=" (⊙${VIRTUAL_ENV#$WORKON_HOME/})"
    fi

    local gitinfo_file="$__dotfiles_prompt_gitinfo_file"
    gitinfo > "$gitinfo_file" &
    local nodeinfo_file="$__dotfiles_prompt_nodeinfo_file"
    nodeinfo > "$nodeinfo_file" &
    local goinfo_file="$__dotfiles_prompt_goinfo_file"
    goinfo > "$goinfo_file" &
    local k8sinfo_file="$__dotfiles_prompt_k8sinfo_file"
    k8sinfo > "$k8sinfo_file" &

    wait

    gitinfo=$(cat "$gitinfo_file")
    nodeinfo=$(cat "$nodeinfo_file")
    goinfo=$(cat "$goinfo_file")
    k8sinfo=$(cat "$k8sinfo_file")

    # this stuff can be used for _responsive_ design
    # local size=($(stty size))
    # local rows=${size[0]}
    # local cols=${size[1]}

    ret+="$cmd_info$_USER$mark$connectionmark$green\h$nocol$write"
    ret+="$yellow\w$nocol"
    # test "$(expr ${#ret} + ${#gitinfo})" -gt "$cols" && ret+="\n"
    ret+="$gitinfo"
    # test "$(expr ${#ret} + ${#venv})" -gt "$cols" && ret+="\n"
    ret+="$venv"
    ret+="$nodeinfo"
    ret+="$goinfo"
    ret+="$k8sinfo"

    # use multi-line prompt as the main prompt as well
    ret+="\n$PS2"

    PS1=$ret

    # custom terminal title
    # echo -ne "\033]0;${connectionmark}\007"
    echo -ne "\033]0;\007\c"
}

function list_prompt_commands() {
    for command in $(echo ${PROMPT_COMMAND//;/ })
    do
        echo $command
    done
}

# don't add duplicate commands to the prompt command and
# make sure set_prompt runs first, so the return code can be captured
new_prompt_command=$(list_prompt_commands | grep -v '^set_prompt$' | awk '!x[$0]++' | tr '\n' ';')
new_prompt_command="set_prompt;$new_prompt_command"

export PROMPT_COMMAND=$new_prompt_command

export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad
