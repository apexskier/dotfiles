# vim: ft=sh

#set -x

unset color_prompt force_color_prompt

    nocol="\[\033[m\]"
    black="\[\033[0;30m\]"
     blue="\[\033[0;34m\]"
    green="\[\033[0;32m\]"
     cyan="\[\033[0;36m\]"
      red="\[\033[0;31m\]"
   purple="\[\033[0;35m\]"
    brown="\[\033[0;33m\]"
  lt_grey="\[\033[0;37m\]"
  dk_gray="\[\033[1;30m\]"
  lt_blue="\[\033[1;34m\]"
 lt_green="\[\033[1;32m\]"
  lt_cyan="\[\033[1;36m\]"
   lt_red="\[\033[1;31m\]"
lt_purple="\[\033[1;35m\]"
   yellow="\[\033[1;33m\]"
    white="\[\033[1;37m\]"


_USER=""
# Yellow for root, bold if the user is not the login one, else no color.
if [[ "$EUID" -ne "0" ]] ; then  # if user is not root
    # if user is not login user
    if [[ $USER != "$(logname 2>/dev/null || echo $LOGNAME)" ]]; then
        _USER="$lt_grey"
    else
        _USER="$cyan"
    fi
else # root!
    _USER="$lt_cyan"
fi
_USER+="\u$nocol"

STATIC_TITLE_TEXT=""

get_connection_type() {
    if [[ -n "$SSH_CLIENT$SSH2_CLIENT$SSH_TTY" ]] ; then
        echo ssh
    else
        # TODO check on *BSD
        local sess_src="$(who am i | sed -n 's/.*(\(.*\))/\1/p')"
        local sess_parent="$(ps -o comm= -p $PPID 2> /dev/null)"
        if [[ -z "$sess_src" || "$sess_src" = ":"* ]] ; then
            echo lcl # Local
        elif [[ "$sess_parent" = "su" || "$sess_parent" = "sudo" ]] ; then
            echo su  # Remote su/sudo
        else
            echo tel # Telnet
        fi
    fi
}
CONNECTION_TYPE=$(get_connection_type)
case "$CONNECTION_TYPE" in
ssh)
    connectionmark="⇝"
    ;;
tel)
    connectionmark="⇢"
    ;;
esac

mark="@"
# If we are connected with X11 support (remote windowing on linux)
if [[ -n "$DISPLAY" ]] ; then
    mark="$white$mark$nocol"
else
    mark="$lt_grey$mark$nocol"
fi

# make this a little less prominant and different from normal text
# I don't use $ because it means something in bash
PS2="${lt_grey}▻ ${nocol}"

function set_prompt() {
    # get return code of last cmd
    local -i last_err=$?
    local cmd_info=""
    if (( last_err != 0 )); then
        cmd_info="$red$last_err ↩$nocol\n"
    fi

    history -a

    local ret

    local write=":"
    if [[ -w "$PWD" ]] ; then
        write="$green$write$nocol"
    else
        write="$red$write$nocol"
    fi

    local venv
    if [[ -n "$VIRTUAL_ENV" ]] ; then
        venv=" (⊙${VIRTUAL_ENV#$WORKON_HOME/}) "
    fi

    local gitbranch="$(git rev-parse --abbrev-ref HEAD 2> /dev/null)"
    if [[ -n "$gitbranch" ]] ; then
        gitbranch=" (±$gitbranch)"
    fi

    local nodejs
    if command -v node >/dev/null 2>&1; then
        local npm_prefix=$(npm prefix)
        if [[ -f "$npm_prefix/package.json" ]] ; then
            local node_version="$(node --version)"
            nodejs+=" (node "
            # if ! npx -q check-node-version --node "$(node -e "process.stdout.write((require('./package.json').engines || {}).node || '')")" > /dev/null 2>&1 ; then
            #     nodejs+="$red"
            # fi

            nodejs+="$node_version$nocol"
            nodejs+=")"
        fi
    fi

    local kube="$(kube_ps1)"
    if [[ -n "$kube" ]] ; then
        kube=" $kube"
    fi

    # this stuff can be used for _responsive_ design
    # local size=($(stty size))
    # local rows=${size[0]}
    # local cols=${size[1]}

    ret+="$cmd_info$_USER$mark$connectionmark$green\h$nocol$write"
    ret+="$yellow\w$nocol"
    # test "$(expr ${#ret} + ${#gitbranch})" -gt "$cols" && ret+="\n"
    ret+="$gitbranch"
    # test "$(expr ${#ret} + ${#venv})" -gt "$cols" && ret+="\n"
    ret+="$venv"
    ret+="$nodejs"
    ret+="$kube"

    # use multi-line prompt as the main prompt as well
    ret+="\n$PS2"

    PS1=$ret

    # custom terminal title
    # echo -ne "\033]0;${connectionmark}\007"
}

function list_prompt_commands() {
    for command in $(echo ${PROMPT_COMMAND//;/ })
    do
        echo $command
    done
}

# don't add duplicate commands to the prompt command and
# make sure set_prompt runs first, so the return code can be captured
new_prompt_command=$(list_prompt_commands | grep -v '^set_prompt$' | awk '!x[$0]++' | tr '\n' ';')
new_prompt_command="set_prompt;$new_prompt_command"

export PROMPT_COMMAND=$new_prompt_command

export CLICOLOR=1
export LSCOLORS=ExFxBxDxCxegedabagacad
