#!bash
# vim: ft=sh

if shopt -oq posix; then
    # non-interactive shell
    exit 0
fi

# bash/zsh completion support for Fabric
#
# Copyright (C) 2013 Danilo Dellaquila <danilo@dellaquila.es>
# Distributed under the GNU General Public License, version 3.0.
# http://www.gnu.org/licenses/gpl.html
#
# To install see
# http://danilodellaquila.com/blog/how-to-add-bash-completion-to-fabric
_fab()
{
    local cur commands
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    list=$(fab 2>/dev/null --list | sed '0,/^Available commands:$/d' | sed '/^$/d' | sed 's/^....//' | cut -d " " -f1)
    COMPREPLY=( $(compgen -W "${list}" -- ${cur}) )
    return 0
}
complete -F _fab fab

# bash autocompletion support for gulpfile. Prints matching gulp tasks (slow)
_gulp()
{
    local cur commands
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    list=$(gulp --tasks | tail -n +3 | cut -d' ' -f3 | grep -v '[├└]')
    COMPREPLY=( $(compgen -W "${list}" -- ${cur}) )
    return 0
}
complete -F _gulp gulp

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#
if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# not sure why this doesn't work
# if [ -f /etc/bash_completion ]; then
#     . /etc/bash_completion
# fi
